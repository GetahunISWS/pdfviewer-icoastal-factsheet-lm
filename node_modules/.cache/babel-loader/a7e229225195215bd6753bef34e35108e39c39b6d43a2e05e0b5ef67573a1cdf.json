{"ast":null,"code":"import data from'../data/EDAPlots-selected.json';import factdata from'../data/FactSheet-selectedparameters.json';import trenddata from'../data/Trendmap-selectedparameters.json';export const getTrendParametersNames=()=>{return new Promise((res,rej)=>{const trendParameterNamesData=trenddata.map(_ref=>{let{ParameterName}=_ref;return ParameterName;});res([...new Set(trendParameterNamesData)]);});};export const getTrendPeriodNames=parameterName=>{return new Promise((res,rej)=>{let periodNames=trenddata.filter(record=>record.ParameterName===parameterName);periodNames=periodNames.map(_ref2=>{let{Period}=_ref2;return Period;});console.log(periodNames);res(periodNames);});};export const getTrendParameterCode=(periodName,parameterName)=>{return new Promise((res,rej)=>{let filteredRecords=trenddata.filter(record=>record.Period===periodName&&record.ParameterName===parameterName);console.log(filteredRecords);if(filteredRecords&&filteredRecords.length>0){const[record,...records]=filteredRecords;res([record.Parameter_Code,record.trend_record_code]);}});};export const getParametersNames=()=>{return new Promise((res,rej)=>{const parameterNamesData=data.map(_ref3=>{let{ParameterNames}=_ref3;return ParameterNames;});res([...new Set(parameterNamesData)]);});};export const getWaterParametersNames=()=>{return new Promise((res,rej)=>{const waterParameterNamesData=factdata.map(_ref4=>{let{ParameterName}=_ref4;return ParameterName;});res([...new Set(waterParameterNamesData)]);});};export const getParameterCode=(stationName,parameterName)=>{return new Promise((res,rej)=>{let filteredRecords=data.filter(record=>record.StationName===stationName&&record.ParameterNames===parameterName);console.log(filteredRecords);if(filteredRecords&&filteredRecords.length>0){const[record,...records]=filteredRecords;res([record.ParameterCode,record.record_code]);}});};export const getWaterParameterCode=waterParameterName=>{return new Promise((res,rej)=>{let filteredRecords=factdata.filter(record=>record.ParameterName===waterParameterName);console.log(filteredRecords);if(filteredRecords&&filteredRecords.length>0){const[record]=filteredRecords;res(record.Parameter_Code);}});};export const getStationNames=parameterName=>{return new Promise((res,rej)=>{let stationNames=data.filter(record=>record.ParameterNames===parameterName);stationNames=stationNames.map(_ref5=>{let{StationName}=_ref5;return StationName;});console.log(stationNames);res(stationNames);});};export const getRecordCode=(stationName,parameterCode)=>{const bracketsRegex=/\\(([^)]+)\\)/;const bracketCode=bracketsRegex.exec(stationName);console.log(bracketCode[1]);return\"\".concat(bracketCode[1],\"00\").concat(parameterCode);};","map":{"version":3,"names":["data","factdata","trenddata","getTrendParametersNames","Promise","res","rej","trendParameterNamesData","map","_ref","ParameterName","Set","getTrendPeriodNames","parameterName","periodNames","filter","record","_ref2","Period","console","log","getTrendParameterCode","periodName","filteredRecords","length","records","Parameter_Code","trend_record_code","getParametersNames","parameterNamesData","_ref3","ParameterNames","getWaterParametersNames","waterParameterNamesData","_ref4","getParameterCode","stationName","StationName","ParameterCode","record_code","getWaterParameterCode","waterParameterName","getStationNames","stationNames","_ref5","getRecordCode","parameterCode","bracketsRegex","bracketCode","exec","concat"],"sources":["C:/Users/nnk4/Projects/pdf-viewer-FOX - Copy/src/Utils/utils.js"],"sourcesContent":["import data from '../data/EDAPlots-selected.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\nimport trenddata from '../data/Trendmap-selectedparameters.json'\r\n\r\n\r\nexport const getTrendParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const trendParameterNamesData = trenddata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(trendParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getTrendPeriodNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let periodNames = trenddata.filter((record) => record.ParameterName === parameterName);\r\n        periodNames = periodNames.map(({Period}) => Period);\r\n        console.log(periodNames)\r\n        res(periodNames);\r\n    });\r\n}\r\n\r\nexport const getTrendParameterCode = (periodName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = trenddata.filter((record) => record.Period === periodName \r\n            && record.ParameterName === parameterName);\r\n        console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.Parameter_Code, record.trend_record_code]);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}