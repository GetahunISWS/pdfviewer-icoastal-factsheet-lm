{"ast":null,"code":"import data from '../data/EDAPlots-selected.json';\nimport factdata from '../data/FactSheet-selectedparameters.json';\nimport trenddata from '../data/Trendmap-selectedparameters.json';\nexport const getTrendParametersNames = () => {\n  return new Promise((res, rej) => {\n    const trendParameterNamesData = trenddata.map(({\n      ParameterName\n    }) => ParameterName);\n    res([...new Set(trendParameterNamesData)]);\n  });\n};\nexport const getTrendPeriodNames = parameterName => {\n  return new Promise((res, rej) => {\n    let periodNames = trenddata.filter(record => record.ParameterName === parameterName);\n    periodNames = periodNames.map(({\n      Period\n    }) => Period);\n    console.log(periodNames);\n    res(periodNames);\n  });\n};\nexport const getTrendParameterCode = (periodName, parameterName) => {\n  return new Promise((res, rej) => {\n    let filteredRecords = trenddata.filter(record => record.Period === periodName && record.ParameterName === parameterName);\n    console.log(filteredRecords);\n    if (filteredRecords && filteredRecords.length > 0) {\n      const [record, ...records] = filteredRecords;\n      res([record.Parameter_Code, record.trend_record_code]);\n    }\n  });\n};\nexport const getParametersNames = () => {\n  return new Promise((res, rej) => {\n    const parameterNamesData = data.map(({\n      ParameterNames\n    }) => ParameterNames);\n    res([...new Set(parameterNamesData)]);\n  });\n};\nexport const getWaterParametersNames = () => {\n  return new Promise((res, rej) => {\n    const waterParameterNamesData = factdata.map(({\n      ParameterName\n    }) => ParameterName);\n    res([...new Set(waterParameterNamesData)]);\n  });\n};\nexport const getParameterCode = (stationName, parameterName) => {\n  return new Promise((res, rej) => {\n    let filteredRecords = data.filter(record => record.StationName === stationName && record.ParameterNames === parameterName);\n    console.log(filteredRecords);\n    if (filteredRecords && filteredRecords.length > 0) {\n      const [record, ...records] = filteredRecords;\n      res([record.ParameterCode, record.record_code]);\n    }\n  });\n};\nexport const getWaterParameterCode = waterParameterName => {\n  return new Promise((res, rej) => {\n    let filteredRecords = factdata.filter(record => record.ParameterName === waterParameterName);\n    console.log(filteredRecords);\n    if (filteredRecords && filteredRecords.length > 0) {\n      const [record] = filteredRecords;\n      res(record.Parameter_Code);\n    }\n  });\n};\nexport const getStationNames = parameterName => {\n  return new Promise((res, rej) => {\n    let stationNames = data.filter(record => record.ParameterNames === parameterName);\n    stationNames = stationNames.map(({\n      StationName\n    }) => StationName);\n    console.log(stationNames);\n    res(stationNames);\n  });\n};\nexport const getRecordCode = (stationName, parameterCode) => {\n  const bracketsRegex = /\\(([^)]+)\\)/;\n  const bracketCode = bracketsRegex.exec(stationName);\n  console.log(bracketCode[1]);\n  return `${bracketCode[1]}00${parameterCode}`;\n};","map":{"version":3,"names":["data","factdata","trenddata","getTrendParametersNames","Promise","res","rej","trendParameterNamesData","map","ParameterName","Set","getTrendPeriodNames","parameterName","periodNames","filter","record","Period","console","log","getTrendParameterCode","periodName","filteredRecords","length","records","Parameter_Code","trend_record_code","getParametersNames","parameterNamesData","ParameterNames","getWaterParametersNames","waterParameterNamesData","getParameterCode","stationName","StationName","ParameterCode","record_code","getWaterParameterCode","waterParameterName","getStationNames","stationNames","getRecordCode","parameterCode","bracketsRegex","bracketCode","exec"],"sources":["C:/Users/nnk4/Projects/pdf-viewer-FOX - Copy/src/Utils/utils.js"],"sourcesContent":["import data from '../data/EDAPlots-selected.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\nimport trenddata from '../data/Trendmap-selectedparameters.json'\r\n\r\n\r\nexport const getTrendParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const trendParameterNamesData = trenddata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(trendParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getTrendPeriodNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let periodNames = trenddata.filter((record) => record.ParameterName === parameterName);\r\n        periodNames = periodNames.map(({Period}) => Period);\r\n        console.log(periodNames)\r\n        res(periodNames);\r\n    });\r\n}\r\n\r\nexport const getTrendParameterCode = (periodName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = trenddata.filter((record) => record.Period === periodName \r\n            && record.ParameterName === parameterName);\r\n        console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.Parameter_Code, record.trend_record_code]);\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}