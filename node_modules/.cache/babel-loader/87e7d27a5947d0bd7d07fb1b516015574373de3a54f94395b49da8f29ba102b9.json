{"ast":null,"code":"import data from'../data/EDAPlots-selectedparameters.json';import factdata from'../data/FactSheet-selectedparameters.json';export const getParametersNames=()=>{return new Promise((res,rej)=>{const parameterNamesData=data.map(_ref=>{let{ParameterNames}=_ref;return ParameterNames;});res([...new Set(parameterNamesData)]);});};export const getWaterParametersNames=()=>{return new Promise((res,rej)=>{const waterParameterNamesData=factdata.map(_ref2=>{let{ParameterName}=_ref2;return ParameterName;});res([...new Set(waterParameterNamesData)]);});};export const getParameterCode=(stationName,parameterName)=>{return new Promise((res,rej)=>{let filteredRecords=data.filter(record=>record.StationName===stationName&&record.ParameterNames===parameterName);console.log(filteredRecords);if(filteredRecords&&filteredRecords.length>0){const[record,...records]=filteredRecords;res([record.ParameterCode,record.record_code]);}});};export const getWaterParameterCode=waterParameterName=>{return new Promise((res,rej)=>{let filteredRecords=factdata.filter(record=>record.ParameterName===waterParameterName);console.log(filteredRecords);if(filteredRecords&&filteredRecords.length>0){const[record]=filteredRecords;res(record.Parameter_Code);}});};export const getStationNames=parameterName=>{return new Promise((res,rej)=>{let stationNames=data.filter(record=>record.ParameterNames===parameterName);stationNames=stationNames.map(_ref3=>{let{StationName}=_ref3;return StationName;});console.log(stationNames);res(stationNames);});};export const getRecordCode=(stationName,parameterCode)=>{const bracketsRegex=/\\(([^)]+)\\)/;const bracketCode=bracketsRegex.exec(stationName);console.log(bracketCode[1]);return\"\".concat(bracketCode[1],\"00\").concat(parameterCode);};","map":{"version":3,"names":["data","factdata","getParametersNames","Promise","res","rej","parameterNamesData","map","_ref","ParameterNames","Set","getWaterParametersNames","waterParameterNamesData","_ref2","ParameterName","getParameterCode","stationName","parameterName","filteredRecords","filter","record","StationName","console","log","length","records","ParameterCode","record_code","getWaterParameterCode","waterParameterName","Parameter_Code","getStationNames","stationNames","_ref3","getRecordCode","parameterCode","bracketsRegex","bracketCode","exec","concat"],"sources":["C:/Users/nnk4/Projects/pdf-viewer-FOX/src/Utils/utils.js"],"sourcesContent":["import data from '../data/EDAPlots-selectedparameters.json'\r\nimport factdata from '../data/FactSheet-selectedparameters.json'\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StationName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationName, parameterCode) => {\r\n    const bracketsRegex = /\\(([^)]+)\\)/;\r\n    const bracketCode = bracketsRegex.exec(stationName)\r\n    console.log(bracketCode[1]);\r\n    return `${bracketCode[1]}00${parameterCode}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}