{"ast":null,"code":"import data from '../data/EDAPlots-new.json';\nimport factdata from '../data/FactSheet-new.json';\nexport const getParametersNames = () => {\n  return new Promise((res, rej) => {\n    const parameterNamesData = data.map(({\n      ParameterNames\n    }) => ParameterNames);\n    res([...new Set(parameterNamesData)]);\n  });\n};\nexport const getWaterParametersNames = () => {\n  return new Promise((res, rej) => {\n    const waterParameterNamesData = factdata.map(({\n      ParameterName\n    }) => ParameterName);\n    res([...new Set(waterParameterNamesData)]);\n  });\n};\nexport const getParameterCode = (stationName, parameterName) => {\n  return new Promise((res, rej) => {\n    let filteredRecords = data.filter(record => record.StatioName === stationName && record.ParameterNames === parameterName);\n    console.log(filteredRecords);\n    if (filteredRecords && filteredRecords.length > 0) {\n      const [record, ...records] = filteredRecords;\n      res([record.ParameterCode, record.record_code]);\n    }\n  });\n};\nexport const getWaterParameterCode = waterParameterName => {\n  return new Promise((res, rej) => {\n    let filteredRecords = factdata.filter(record => record.ParameterName === waterParameterName);\n    console.log(filteredRecords);\n    if (filteredRecords && filteredRecords.length > 0) {\n      const [record] = filteredRecords;\n      res(record.Parameter_Code);\n    }\n  });\n};\nexport const getStationNames = parameterName => {\n  return new Promise((res, rej) => {\n    let stationNames = data.filter(record => record.ParameterNames === parameterName);\n    stationNames = stationNames.map(({\n      StationName\n    }) => StationName);\n    console.log(stationNames);\n    res(stationNames);\n  });\n};\nexport const getStationIDs = parameterName => {\n  return new Promise((res, rej) => {\n    let stationIDs = data.filter(record => record.ParameterNames === parameterName);\n    stationIDs = stationIDs.map(({\n      Station_ID\n    }) => Station_ID);\n    console.log(stationIDs);\n    res(stationIDs);\n  });\n};\nexport const getRecordCode = (stationID, parameterCode) => {\n  return `${stationID}00${parameterCode}`;\n};","map":{"version":3,"names":["data","factdata","getParametersNames","Promise","res","rej","parameterNamesData","map","ParameterNames","Set","getWaterParametersNames","waterParameterNamesData","ParameterName","getParameterCode","stationName","parameterName","filteredRecords","filter","record","StatioName","console","log","length","records","ParameterCode","record_code","getWaterParameterCode","waterParameterName","Parameter_Code","getStationNames","stationNames","StationName","getStationIDs","stationIDs","Station_ID","getRecordCode","stationID","parameterCode"],"sources":["C:/Users/nnk4/Projects/pdf-viewer-FOX/src/Utils/utils.js"],"sourcesContent":["import data from '../data/EDAPlots-new.json'\r\nimport factdata from '../data/FactSheet-new.json'\r\n\r\nexport const getParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const parameterNamesData = data.map(({ParameterNames}) => ParameterNames);\r\n        res([...new Set(parameterNamesData)]);\r\n    });\r\n}\r\nexport const getWaterParametersNames = () => {\r\n    return new Promise((res, rej) => {\r\n        const waterParameterNamesData = factdata.map(({ParameterName}) => ParameterName);\r\n        res([...new Set(waterParameterNamesData)]);\r\n    });\r\n}\r\n\r\nexport const getParameterCode = (stationName, parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = data.filter((record) => record.StatioName === stationName \r\n            && record.ParameterNames === parameterName);\r\n            console.log(filteredRecords)\r\n        if(filteredRecords && filteredRecords.length > 0) {\r\n            const [record, ...records] = filteredRecords;\r\n            res([record.ParameterCode, record.record_code]);\r\n        }\r\n    });\r\n}\r\n\r\nexport const getWaterParameterCode = (waterParameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let filteredRecords = factdata.filter((record) => record.ParameterName === waterParameterName \r\n          );\r\n            console.log(filteredRecords)\r\n            if(filteredRecords && filteredRecords.length > 0) {\r\n                const [record] = filteredRecords;\r\n                res(record.Parameter_Code);\r\n            }\r\n        });\r\n}\r\n\r\nexport const getStationNames = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationNames = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationNames = stationNames.map(({StationName}) => StationName);\r\n        console.log(stationNames)\r\n        res(stationNames);\r\n    });\r\n}\r\n\r\nexport const getStationIDs = (parameterName) => {\r\n    return new Promise((res, rej) => {\r\n        let stationIDs = data.filter((record) => record.ParameterNames === parameterName);\r\n        stationIDs = stationIDs.map(({Station_ID}) => Station_ID);\r\n        console.log(stationIDs)\r\n        res(stationIDs);\r\n    });\r\n}\r\n\r\nexport const getRecordCode = (stationID, parameterCode) => {\r\n    return `${stationID}00${parameterCode}`;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}